from time import time

from asyncio import sleep, run
from datetime import timedelta
from discord import Embed, FFmpegPCMAudio
from discord.ext.commands import Cog, command
from discord.ext.tasks import loop
from discord_components_mirror import Button, ButtonStyle, Select, SelectOption
from json import loads
from mlpbots import logs, LEVELS, FOOTER, save
from re import findall
from requests import get
from threading import Thread
from traceback import format_exc
from youtube_dl import YoutubeDL


class Player(Cog):
    def __init__(self, bot):
        try:
            self.BOT, self.vc, self.entries, self.ctx, self.arg = bot, None, None, None, None
            self.online.start()
            self.playlist.start()
            self.player.start()
        except Exception:
            run(main=logs(level=LEVELS[4], message=format_exc()))

    def cog_unload(self):
        try:
            self.online.cancel()
            self.playlist.cancel()
            self.player.cancel()
        except Exception:
            run(main=logs(level=LEVELS[4], message=format_exc()))

    async def subscribe(self, interaction):
        try:
            from db.members import members
            status = None
            if members[interaction.user.id]["–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"]:
                status = "–ü–æ–¥–ø–∏—Å–∞–Ω"
            else:
                status = "–ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω"
            embed = Embed(title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏:", color=0x00FFFF,
                          description="–ü–æ–¥–ø–∏—Å–∞—Ç—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä—è–º—ã—Ö —ç—Ñ–∏—Ä–∞—Ö?")
            embed.add_field(name="–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:", value=f"{status}")
            embed.set_thumbnail(url="https://discord.com/assets/a6d05968d7706183143518d96c9f066e.svg")
            embed.set_footer(text=FOOTER["–¢–µ–∫—Å—Ç"], icon_url=FOOTER["–°—Å—ã–ª–∫–∞"])
            await interaction.send(embed=embed, components=[[Button(emoji="üîî", id="notifyon"),
                                                             Button(emoji="üîï", id="notifyoff")]])
            if self.vc:
                pass
        except Exception:
            await logs(level=LEVELS[4], message=format_exc())

    @loop(seconds=60)
    async def online(self):
        try:
            params = {"operationName": "", "variables": {},
                      "query": "{getCalendarEvents {summary startsAt endsAt}}"}
            content = loads(s=get(url="https://everhoof.ru/api/graphql", params=params).text)["data"]
            if len(content["getCalendarEvents"]) > 0:
                start = int(str(content["getCalendarEvents"][0]["startsAt"])[:10])
                end = int(str(content["getCalendarEvents"][0]["endsAt"])[:10])
                if start <= int(time()) <= end:
                    from db.settings import settings
                    if settings["–¢—Ä–∏–≥–≥–µ—Ä"] < start:
                        members = ""
                        from db.members import members
                        for member in members:
                            if members[member]["–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"]:
                                members += f"<@{member}>, "
                        await self.BOT.get_channel(id=1007585194863251468).send(
                            content=f"{members}\n–°–µ–π—á–∞—Å –≤ –ø—Ä—è–º–æ–º —ç—Ñ–∏—Ä–µ "
                                    f"**\"{content['getCalendarEvents'][0]['summary']}\"**!")
                        settings["–¢—Ä–∏–≥–≥–µ—Ä"] = end
                        await save(file="settings", content=settings)
        except Exception:
            await logs(level=LEVELS[4], message=format_exc())

    @loop(count=1)
    async def playlist(self):
        try:
            if self.entries is not None:
                entries, ctx, arg = self.entries, self.ctx, self.arg
                self.entries, self.ctx, self.arg = None, None, None
                from db.queue import queue
                queue_1, position = [], 1
                for track in queue:
                    queue_1.append(track)
                if len(queue_1) > 0:
                    position = queue_1[-1] + 1

                def download(en, ps, lp):
                    for video_1 in en:
                        from db.queue import queue
                        download_1 = YoutubeDL(
                            params={"nocheckcertificate": "True", "format": "bestaudio", "noplaylist": "False",
                                    "default_search": "auto", "extract_flat": "in_playlist"}).extract_info(
                            url=video_1["id"], download=False)
                        queue.update({ps: {"channel": download_1["channel"], "title": download_1["title"],
                                           "webpage_url": download_1["webpage_url"],
                                           "thumbnail": download_1["thumbnail"],
                                           "url": download_1["url"], "duration": download_1["duration"]}})
                        run(main=save(file="queue", content=queue))
                        ps += 1

                if len(entries) == 1:
                    download = YoutubeDL(
                        params={"nocheckcertificate": "True", "format": "bestaudio", "noplaylist": "False",
                                "default_search": "auto", "extract_flat": "in_playlist"}).extract_info(
                        url=entries[0]["id"], download=False)
                    queue.update({position: {"channel": download["channel"], "title": download["title"],
                                             "webpage_url": download["webpage_url"], "thumbnail": download["thumbnail"],
                                             "url": download["url"], "duration": download["duration"]}})
                    await save(file="queue", content=queue)
                    embed = Embed(title="–ü–ª–µ–µ—Ä:", color=0x008000,
                                  description=f"–°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å!\n\n"
                                              f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É **!play** —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ...")
                    embed.add_field(name=f"{position}. {download['webpage_url']}", inline=False,
                                    value=f"–ò—Å–ø–æ–ª—å–Ω–∏—Ç–µ–ª—å: {download['channel']}\n"
                                          f"–ù–∞–∑–≤–∞–Ω–∏–µ: {download['title']}\n"
                                          f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {timedelta(seconds=download['duration'])}")
                    embed.set_thumbnail(url=download["thumbnail"])
                    embed.set_footer(text=FOOTER["–¢–µ–∫—Å—Ç"], icon_url=FOOTER["–°—Å—ã–ª–∫–∞"])
                    await ctx.send(embed=embed)
                else:
                    videos, i = [[]], 0
                    for video in entries:
                        if len(videos[i]) < 25:
                            videos[i].append(video)
                        else:
                            i += 1
                            videos.append([video])
                    loop_1 = 1
                    for video in videos:
                        thread = Thread(target=download, args=(video, position, loop_1))
                        thread.start()
                        position += len(video)
                        loop_1 += 1
                    embed = Embed(title="–ü–ª–µ–µ—Ä:", color=0x008000,
                                  description=f"{len(entries)} —Ç—Ä–µ–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å!\n\n"
                                              f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É **!play** —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ...")
                    embed.set_footer(text=FOOTER["–¢–µ–∫—Å—Ç"], icon_url=FOOTER["–°—Å—ã–ª–∫–∞"])
                    await ctx.send(embed=embed)
            else:
                self.playlist.cancel()
        except Exception:
            await logs(level=LEVELS[4], message=format_exc())

    @loop(count=1)
    async def player(self):
        try:
            while True:
                from db.queue import queue
                if len(queue) > 0:
                    for key in queue:
                        self.vc = None
                        try:
                            for vc in self.BOT.voice_clients:
                                await vc.disconnect()
                        except Exception:
                            await logs(level=LEVELS[1], message=format_exc())
                        try:
                            self.vc = await self.BOT.get_channel(id=1007577295877320765).connect()
                            try:
                                self.vc.play(FFmpegPCMAudio(source=f"{queue[key]['url']}",
                                                            executable="ffmpeg/bin/ffmpeg.exe"))
                            except Exception:
                                self.vc.play(FFmpegPCMAudio(source=f"{queue[key]['url']}"))
                                await logs(level=LEVELS[1], message=format_exc())
                        except Exception:
                            await logs(level=LEVELS[1], message=format_exc())
                        from db.settings import settings
                        try:
                            post = await self.BOT.get_channel(id=1007585194863251468).fetch_message(
                                id=settings["–ü–ª–µ–µ—Ä"])
                            await post.delete()
                        except Exception:
                            await logs(level=LEVELS[1], message=format_exc())
                        embed = Embed(title="–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç:", color=0x00FFFF)
                        embed.set_thumbnail(url=queue[key]["thumbnail"])
                        embed.add_field(name=queue[key]["title"], inline=False,
                                        value=f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {queue[key]['channel']}\n"
                                              f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {timedelta(seconds=queue[key]['duration'])}\n"
                                              f"–°—Å—ã–ª–∫–∞: {queue[key]['webpage_url']}")
                        embed.set_footer(text=FOOTER["–¢–µ–∫—Å—Ç"], icon_url=FOOTER["–°—Å—ã–ª–∫–∞"])
                        post = await self.BOT.get_channel(id=1007585194863251468).send(embed=embed, components=[[
                            Button(emoji="‚ñ∂Ô∏è", style=ButtonStyle.blue, id="play"),
                            Button(emoji="‚è∏Ô∏è", style=ButtonStyle.blue, id="pause"),
                            Button(emoji="‚è≠Ô∏è", style=ButtonStyle.blue, id="next"),
                            Button(label="–û—á–µ—Ä–µ–¥—å", style=ButtonStyle.green)]])
                        settings["–ü–ª–µ–µ—Ä"] = post.id
                        await save(file="settings", content=settings)
                        duration = queue[key]["duration"]
                        queue.pop(key)
                        await save(file="queue", content=queue)
                        await sleep(delay=duration)
                        break
                else:
                    self.vc = None
                    try:
                        for vc in self.BOT.voice_clients:
                            await vc.disconnect()
                    except Exception:
                        await logs(level=LEVELS[1], message=format_exc())
                    try:
                        self.vc = await self.BOT.get_channel(id=1007577295877320765).connect()
                        try:
                            self.vc.play(FFmpegPCMAudio(source="https://everhoof.ru/320",
                                                        executable="ffmpeg/bin/ffmpeg.exe"))
                        except Exception:
                            self.vc.play(FFmpegPCMAudio(source="https://everhoof.ru/320"))
                            await logs(level=LEVELS[1], message=format_exc())
                    except Exception:
                        await logs(level=LEVELS[1], message=format_exc())
                    artist, title, duration = "Everhoof Radio", "Everhoof Radio", 60
                    art, delta = "https://everhoof.ru/favicon.png", 60
                    try:
                        params = {"operationName": "", "variables": {},
                                  "query": "{getCurrentPlaying {live {isLive} "
                                           "current {artist title endsAt duration art}} "
                                           "getCalendarEvents {summary startsAt endsAt}}"}
                        content = loads(s=get(url="https://everhoof.ru/api/graphql", params=params).text)["data"]
                        current = content["getCurrentPlaying"]["current"]
                        if content["getCurrentPlaying"]["live"]["isLive"]:
                            start = int(str(content["getCalendarEvents"][0]["startsAt"])[:10])
                            end = int(str(content["getCalendarEvents"][0]["endsAt"])[:10])
                            if start <= int(time()) <= end:
                                artist, title, delta = "–í —ç—Ñ–∏—Ä–µ", content["getCalendarEvents"][0]["summary"], 60
                        else:
                            artist, title = current["artist"], current["title"]
                            duration, art = current["duration"], current["art"]
                            try:
                                delta = int(str(current["endsAt"])[:10]) - int(time())
                                if delta == 0:
                                    delta = 60
                            except Exception:
                                delta = 60
                                await logs(level=LEVELS[1], message=format_exc())
                    except Exception:
                        artist, title, duration = "Everhoof Radio", "Everhoof Radio", 60
                        art, delta = "https://everhoof.ru/favicon.png", 60
                        await logs(level=LEVELS[1], message=format_exc())
                    from db.settings import settings
                    try:
                        post = await self.BOT.get_channel(id=1007585194863251468).fetch_message(id=settings["–ü–ª–µ–µ—Ä"])
                        await post.delete()
                    except Exception:
                        await logs(level=LEVELS[1], message=format_exc())
                    embed = Embed(title="–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç:", color=0x00FFFF)
                    embed.set_thumbnail(url=art)
                    embed.add_field(name=title, inline=False,
                                    value=f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {artist}\n"
                                          f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {str(timedelta(seconds=duration))[2:]}\n"
                                          f"–°—Å—ã–ª–∫–∞: https://everhoof.ru")
                    embed.set_footer(text=FOOTER["–¢–µ–∫—Å—Ç"], icon_url=FOOTER["–°—Å—ã–ª–∫–∞"])
                    try:
                        post = await self.BOT.get_channel(id=1007585194863251468).send(embed=embed, components=[
                            [Button(label="–ò—Å—Ç–æ—Ä–∏—è", style=ButtonStyle.green),
                             Button(emoji="‚öô", style=ButtonStyle.blue, id="settings")]])
                        settings["–ü–ª–µ–µ—Ä"] = post.id
                        await save(file="settings", content=settings)
                    except Exception:
                        await logs(level=LEVELS[1], message=format_exc())
                    await sleep(delay=delta)
        except Exception:
            await logs(level=LEVELS[4], message=format_exc())

    @Cog.listener()
    async def on_button_click(self, interaction):
        try:
            if interaction.component.id == "play":
                try:
                    self.vc.resume()
                    await interaction.respond()
                except Exception:
                    pass
        except Exception:
            await logs(level=LEVELS[4], message=format_exc())
        try:
            if interaction.component.id == "pause":
                try:
                    self.vc.pause()
                    await interaction.respond()
                except Exception:
                    pass
        except Exception:
            await logs(level=LEVELS[4], message=format_exc())
        try:
            if interaction.component.id == "next":
                try:
                    self.player.restart()
                    await interaction.respond()
                except Exception:
                    pass
        except Exception:
            await logs(level=LEVELS[4], message=format_exc())
        try:
            if interaction.component.label == "–û—á–µ—Ä–µ–¥—å":
                from db.queue import queue
                embeds, i = [], 0
                pages = int(len(queue) / 24)
                if pages == 0:
                    pages = 1
                embed = Embed(title="–û—á–µ—Ä–µ–¥—å:", color=0x008000,
                              description=f"–°–µ–π—á–∞—Å –≤ –æ—á–µ—Ä–µ–¥–∏ {len(queue)} —Ç—Ä–µ–∫–æ–≤!\n\n"
                                          f"‚¨ÖÔ∏è –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (1 –∏–∑ {pages}) ‚û°Ô∏è\n\n"
                                          f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É **!play** —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ...\n\n")
                embed.set_footer(text=FOOTER["–¢–µ–∫—Å—Ç"], icon_url=FOOTER["–°—Å—ã–ª–∫–∞"])
                embeds.append(embed)
                selector = [[SelectOption(label="–í—Å–µ —Ç—Ä–µ–∫–∏!", value="–í—Å–µ —Ç—Ä–µ–∫–∏")]]
                if len(queue) > 0:
                    for item in queue:
                        if len(selector[i]) < 25:
                            embeds[i].add_field(name=f"{item}. {queue[item]['title']}", inline=False,
                                                value=f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {queue[item]['channel']}\n"
                                                      f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {timedelta(seconds=queue[item]['duration'])}\n"
                                                      f"–°—Å—ã–ª–∫–∞: {queue[item]['webpage_url']}")
                            selector[i].append(SelectOption(label=f"{item}. {queue[item]['title']}", value=f"{item}"))
                        else:
                            i += 1
                            embed = Embed(title="–û—á–µ—Ä–µ–¥—å:", color=0x008000,
                                          description=f"–°–µ–π—á–∞—Å –≤ –æ—á–µ—Ä–µ–¥–∏ {len(queue)} —Ç—Ä–µ–∫–æ–≤!\n\n"
                                                      f"‚¨ÖÔ∏è –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ({i + 1} –∏–∑ {pages}) ‚û°Ô∏è\n\n"
                                                      f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É **!play** —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ..."
                                                      f"\n\n")
                            embed.set_footer(text=FOOTER["–¢–µ–∫—Å—Ç"], icon_url=FOOTER["–°—Å—ã–ª–∫–∞"])
                            embeds.append(embed)
                            selector.append([SelectOption(label="–í—Å–µ —Ç—Ä–µ–∫–∏!", value="–í—Å–µ —Ç—Ä–µ–∫–∏")])
                else:
                    embed = Embed(title="–û—á–µ—Ä–µ–¥—å:", color=0x008000,
                                  description="–°–µ–π—á–∞—Å –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤!\n\n"
                                              "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É **!play** —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ...")
                    embed.set_footer(text=FOOTER["–¢–µ–∫—Å—Ç"], icon_url=FOOTER["–°—Å—ã–ª–∫–∞"])
                if len(queue) > 0:
                    page = 0
                    post = await self.BOT.get_channel(id=interaction.channel.id).send(
                        embed=embeds[page], delete_after=60, components=[[
                            Button(emoji="‚¨ÖÔ∏è", style=ButtonStyle.blue, id="previous_page"),
                            Button(emoji="‚û°Ô∏è", style=ButtonStyle.blue, id="next_page")], [
                            Select(placeholder="–£–¥–∞–ª–∏—Ç—å –∏–∑ –æ—á–µ—Ä–µ–¥–∏:", options=selector[page])]])
                    try:
                        await interaction.respond()
                    except Exception:
                        pass
                    while True:
                        interaction = await self.BOT.wait_for(event="button_click")
                        try:
                            await self.BOT.get_channel(id=post.channel.id).fetch_message(id=post.id)
                        except Exception:
                            break
                        if interaction.message.id == post.id:
                            if interaction.component.id == "previous_page":
                                if page > 0:
                                    page -= 1
                                    await post.edit(embed=embeds[page], delete_after=60, components=[[
                                        Button(emoji="‚¨ÖÔ∏è", style=ButtonStyle.blue, id="previous_page"),
                                        Button(emoji="‚û°Ô∏è", style=ButtonStyle.blue, id="next_page")], [
                                        Select(placeholder="–£–¥–∞–ª–∏—Ç—å –∏–∑ –æ—á–µ—Ä–µ–¥–∏:", options=selector[page])]])
                                else:
                                    page = pages - 1
                                    await post.edit(embed=embeds[page], delete_after=60, components=[[
                                        Button(emoji="‚¨ÖÔ∏è", style=ButtonStyle.blue, id="previous_page"),
                                        Button(emoji="‚û°Ô∏è", style=ButtonStyle.blue, id="next_page")], [
                                        Select(placeholder="–£–¥–∞–ª–∏—Ç—å –∏–∑ –æ—á–µ—Ä–µ–¥–∏:", options=selector[page])]])
                            if interaction.component.id == "next_page":
                                if page + 1 < pages:
                                    page += 1
                                    await post.edit(embed=embeds[page], delete_after=60, components=[[
                                        Button(emoji="‚¨ÖÔ∏è", style=ButtonStyle.blue, id="previous_page"),
                                        Button(emoji="‚û°Ô∏è", style=ButtonStyle.blue, id="next_page")], [
                                        Select(placeholder="–£–¥–∞–ª–∏—Ç—å –∏–∑ –æ—á–µ—Ä–µ–¥–∏:", options=selector[page])]])
                                else:
                                    page = 0
                                    await post.edit(embed=embeds[page], delete_after=60, components=[[
                                        Button(emoji="‚¨ÖÔ∏è", style=ButtonStyle.blue, id="previous_page"),
                                        Button(emoji="‚û°Ô∏è", style=ButtonStyle.blue, id="next_page")], [
                                        Select(placeholder="–£–¥–∞–ª–∏—Ç—å –∏–∑ –æ—á–µ—Ä–µ–¥–∏:", options=selector[page])]])
                            try:
                                await interaction.respond()
                            except Exception:
                                pass
                else:
                    await interaction.send(embed=embed)
        except Exception:
            await logs(level=LEVELS[4], message=format_exc())
        try:
            if interaction.component.label == "–î–∞":
                from db.queue import queue
                queue = {}
                await save(file="queue", content=queue)
                await interaction.send(content="–û—á–µ—Ä–µ–¥—å —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!")
                await self.BOT.get_channel(id=interaction.channel.id).send(
                    content=f"{interaction.user} –û—á–∏—Å—Ç–∏–ª **–≤—Å—é** –æ—á–µ—Ä–µ–¥—å!")
        except Exception:
            await logs(level=LEVELS[4], message=format_exc())
        try:
            if interaction.component.label == "–ò—Å—Ç–æ—Ä–∏—è":
                embed = Embed(title="–ò—Å—Ç–æ—Ä–∏—è:", color=interaction.user.color)
                try:
                    params = {"operationName": "", "variables": {}, "query": "{getTracksHistory {track {text}}}"}
                    content, i = loads(s=get(url="https://everhoof.ru/api/graphql", params=params).text)["data"], 1
                    for track in content["getTracksHistory"]:
                        info = track["track"]["text"].split(" - ")
                        embed.add_field(name=f"{i}. {info[1]}", value=f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {info[0]}", inline=False)
                        i += 1
                except Exception:
                    embed.add_field(name="–û—à–∏–±–∫–∞!", value="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...",
                                    inline=False)
                    await logs(level=LEVELS[1], message=format_exc())
                embed.set_footer(text=FOOTER["–¢–µ–∫—Å—Ç"], icon_url=FOOTER["–°—Å—ã–ª–∫–∞"])
                await interaction.send(embed=embed)
        except Exception:
            await logs(level=LEVELS[4], message=format_exc())
        try:
            if interaction.component.id == "settings":
                await self.subscribe(interaction=interaction)
        except Exception:
            await logs(level=LEVELS[4], message=format_exc())
        try:
            if interaction.component.id == "notifyon":
                from db.members import members
                members[interaction.user.id]["–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"] = True
                await save(file="members", content=members)
                await self.subscribe(interaction=interaction)
        except Exception:
            await logs(level=LEVELS[4], message=format_exc())
        try:
            if interaction.component.id == "notifyoff":
                from db.members import members
                members[interaction.user.id]["–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"] = False
                await save(file="members", content=members)
                await self.subscribe(interaction=interaction)
        except Exception:
            await logs(level=LEVELS[4], message=format_exc())

    @Cog.listener()
    async def on_select_option(self, interaction):
        try:
            if interaction.values[0] == "–í—Å–µ —Ç—Ä–µ–∫–∏":
                await interaction.send(content="–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å?",
                                       components=[Button(label="–î–∞", style=ButtonStyle.red)])
        except Exception:
            await logs(level=LEVELS[4], message=format_exc())
        try:
            if findall(pattern=r"^\d+", string=interaction.values[0]):
                from db.queue import queue
                if int(interaction.values[0]) in queue:
                    embed = Embed(title="–û—á–µ—Ä–µ–¥—å:", color=0xFF0000,
                                  description="–°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏!\n\n"
                                              "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É **!play** —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ...")
                    duration = timedelta(seconds=queue[int(interaction.values[0])]["duration"])
                    embed.add_field(name=f"{interaction.values[0]}. {queue[int(interaction.values[0])]['title']}",
                                    value=f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {queue[int(interaction.values[0])]['channel']}\n"
                                          f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}\n"
                                          f"–°—Å—ã–ª–∫–∞: {queue[int(interaction.values[0])]['webpage_url']}", inline=False)
                    embed.set_footer(text=FOOTER["–¢–µ–∫—Å—Ç"], icon_url=FOOTER["–°—Å—ã–ª–∫–∞"])
                    queue.pop(int(interaction.values[0]))
                    await save(file="queue", content=queue)
                    await interaction.send(embed=embed)
        except Exception:
            await logs(level=LEVELS[4], message=format_exc())

    @command(description="–í—Å–µ 2", name="play", help="–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫ –≤ –æ—á–µ—Ä–µ–¥—å –ø–ª–µ–µ—Ä–∞",
             brief="`–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç` / `–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å`", usage="!play https://youtu.be/asNy7WJHqdM")
    async def command_play(self, ctx, *, arg):
        try:
            if ctx.channel.id == 1007585194863251468:
                await ctx.message.delete(delay=1)
                download = YoutubeDL(
                    params={"nocheckcertificate": "True", "format": "bestaudio", "noplaylist": "False",
                            "default_search": "auto", "extract_flat": "in_playlist"}).extract_info(
                    url=arg, download=False)
                if "entries" in download:
                    self.entries, self.ctx, self.arg = download["entries"], ctx, arg
                    self.playlist.start()
                else:
                    from db.queue import queue
                    queue_1, pos = [], 1
                    for track in queue:
                        queue_1.append(track)
                    if len(queue_1) > 0:
                        pos = queue_1[-1] + 1
                    queue.update({pos: {"channel": download["channel"], "title": download["title"],
                                        "webpage_url": download["webpage_url"], "thumbnail": download["thumbnail"],
                                        "url": download["url"], "duration": download["duration"]}})
                    await save(file="queue", content=queue)
                    embed = Embed(title="–ü–ª–µ–µ—Ä:", color=0x008000,
                                  description=f"–°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å!\n\n"
                                              f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É **!play** —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ...")
                    embed.add_field(name=f"{pos}. {download['webpage_url']}", inline=False,
                                    value=f"–ò—Å–ø–æ–ª—å–Ω–∏—Ç–µ–ª—å: {download['channel']}\n"
                                          f"–ù–∞–∑–≤–∞–Ω–∏–µ: {download['title']}\n"
                                          f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {timedelta(seconds=download['duration'])}")
                    embed.set_thumbnail(url=download["thumbnail"])
                    embed.set_footer(text=FOOTER["–¢–µ–∫—Å—Ç"], icon_url=FOOTER["–°—Å—ã–ª–∫–∞"])
                    await ctx.send(embed=embed)
        except Exception:
            await logs(level=LEVELS[4], message=format_exc())


def setup(bot):
    try:
        bot.add_cog(cog=Player(bot=bot))
    except Exception:
        run(main=logs(level=LEVELS[4], message=format_exc()))
