from asyncio import run
from datetime import datetime
from discord.ext.commands import Cog
from discord.ext.tasks import loop
from discord.utils import get
from mlpbots import logs, LEVELS, save
from traceback import format_exc


class Activity(Cog):
    def __init__(self, bot):
        try:
            self.BOT = bot
            self.update_members.start()
            self.update_channels.start()
            self.update_roles.start()
        except Exception:
            run(main=logs(level=LEVELS[4], message=format_exc()))

    def cog_unload(self):
        try:
            self.update_members.cancel()
            self.update_channels.cancel()
            self.update_roles.cancel()
        except Exception:
            run(main=logs(level=LEVELS[4], message=format_exc()))

    @loop(hours=1)
    async def update_members(self):
        try:
            users = {}
            from db.members import members
            for guild in self.BOT.guilds:
                for member in guild.members:
                    if member.id not in members:
                        members.update({member.id: {"–ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞": f"{member.name}#{member.discriminator}",
                                                    "–°—Ç–∞—Ç—É—Å": True,
                                                    "–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è": datetime.utcnow(),
                                                    "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è": False,
                                                    "–†–∞–¥—É–≥–∞": False,
                                                    "–ë–æ—Ç": False,
                                                    "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è": [],
                                                    "–î–Ω–∏": (datetime.utcnow() - member.joined_at).days,
                                                    "–°–æ–æ–±—â–µ–Ω–∏—è": 0,
                                                    "–£–ø–æ–º–∏–Ω–∞–Ω–∏—è": 0,
                                                    "–õ–∞–π–∫–∏": 0,
                                                    "–î–∏–∑–ª–∞–π–∫–∏": 0,
                                                    "–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä": member.joined_at,
                                                    "–†–æ–ª–∏": [],
                                                    "–ü–æ—Ö–∏—â–µ–Ω–Ω–∞—è –ø–æ–Ω–∏": {"–°—Ç—Ä–∞–Ω–∏—Ü–∞": "p0", "–ö–æ–Ω—Ü–æ–≤–∫–∏": []},
                                                    "–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏": {"–°—ã–≥—Ä–∞–Ω–æ": 0, "–ü–æ–±–µ–¥": 0, "–ü–æ—Ä–∞–∂–µ–Ω–∏–π": 0,
                                                                        "–ü—Ä–æ—Ü–µ–Ω—Ç": 0},
                                                    "–¢–µ—Ç—Ä–∏—Å": {"–°—ã–≥—Ä–∞–Ω–æ": 0, "–õ—É—á—à–∏–π —Å—á–µ—Ç": 0}}})
                        if member.bot:
                            members[member.id]["–ë–æ—Ç"] = True
                    else:
                        members[member.id].update({"–ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞": f"{member.name}#{member.discriminator}",
                                                   "–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä": member.joined_at})
                        if member.bot:
                            members[member.id]["–ë–æ—Ç"] = True
                        if members[member.id]["–°—Ç–∞—Ç—É—Å"]:
                            if (datetime.utcnow() - members[member.id]["–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"]).days >= 7:
                                if member.id not in [868148805722337320, 868150460735971328]:
                                    roles = [role.id for role in member.roles[1:]]
                                    members[member.id].update({"–°—Ç–∞—Ç—É—Å": False, "–†–æ–ª–∏": roles})
                                    for role_id in roles:
                                        try:
                                            await member.remove_roles(get(iterable=member.guild.roles, id=role_id))
                                        except Exception:
                                            await logs(level=LEVELS[1], message=format_exc())
                                    try:
                                        await member.add_roles(get(iterable=member.guild.roles, id=1007586338238898187))
                                    except Exception:
                                        await logs(level=LEVELS[1], message=format_exc())
                for channel in guild.channels:
                    if str(channel.type) == "text":
                        async for message in channel.history(limit=1000000000):
                            if message.author.id in members:
                                if message.author not in users:
                                    users.update({message.author: {"–°–æ–æ–±—â–µ–Ω–∏–π": 1, "–£–ø–æ–º–∏–Ω–∞–Ω–∏–π": 0,
                                                                   "–î–∞—Ç–∞": message.created_at}})
                                else:
                                    users[message.author]["–°–æ–æ–±—â–µ–Ω–∏–π"] += 1
                                if message.created_at < users[message.author]["–î–∞—Ç–∞"]:
                                    users[message.author]["–î–∞—Ç–∞"] = message.created_at
                                if len(message.mentions) > 0:
                                    for member in message.mentions:
                                        if message.author.id in members:
                                            if member not in users:
                                                users.update({member: {"–°–æ–æ–±—â–µ–Ω–∏–π": 0, "–£–ø–æ–º–∏–Ω–∞–Ω–∏–π": 1,
                                                                       "–î–∞—Ç–∞": message.created_at}})
                                            else:
                                                users[member]["–£–ø–æ–º–∏–Ω–∞–Ω–∏–π"] += 1
                                            if message.created_at < users[member]["–î–∞—Ç–∞"]:
                                                users[member]["–î–∞—Ç–∞"] = message.created_at
            for member in users:
                try:
                    try:
                        if member.joined_at < users[member]["–î–∞—Ç–∞"]:
                            users[member]["–î–∞—Ç–∞"] = member.joined_at
                    except Exception:
                        users[member]["–î–∞—Ç–∞"] = member.joined_at
                except Exception:
                    pass
                members[member.id].update({"–î–Ω–∏": (datetime.utcnow() - users[member]["–î–∞—Ç–∞"]).days,
                                           "–°–æ–æ–±—â–µ–Ω–∏—è": users[member]["–°–æ–æ–±—â–µ–Ω–∏–π"],
                                           "–£–ø–æ–º–∏–Ω–∞–Ω–∏—è": users[member]["–£–ø–æ–º–∏–Ω–∞–Ω–∏–π"],
                                           "–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä": users[member]["–î–∞—Ç–∞"]})
                if member.bot:
                    members[member.id]["–ë–æ—Ç"] = True
            await save(file="members", content=members)
        except Exception:
            await logs(level=LEVELS[4], message=format_exc())

    @loop(hours=1)
    async def update_channels(self):
        try:
            from db.channels import channels
            for guild in self.BOT.guilds:
                for channel in guild.channels:
                    channels.update({channel.id: {"–ù–∞–∑–≤–∞–Ω–∏–µ": channel.name, "–¢–∏–ø": str(channel.type),
                                                  "–ü–æ–∑–∏—Ü–∏—è": channel.position}})
            await save(file="channels", content=channels)
        except Exception:
            await logs(level=LEVELS[4], message=format_exc())

    @loop(hours=1)
    async def update_roles(self):
        try:
            from db.roles import roles
            for guild in self.BOT.guilds:
                for role in guild.roles:
                    roles.update({role.id: {"–ù–∞–∑–≤–∞–Ω–∏–µ": role.name, "–¶–≤–µ—Ç": role.color.value, "–ü–æ–∑–∏—Ü–∏—è": role.position}})
            await save(file="roles", content=roles)
        except Exception:
            await logs(level=LEVELS[4], message=format_exc())

    @Cog.listener()
    async def on_message(self, message):
        try:
            from db.members import members
            if message.author.id in members:
                members[message.author.id]["–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"] = message.created_at
                await save(file="members", content=members)
                if not members[message.author.id]["–°—Ç–∞—Ç—É—Å"]:
                    for role in members[message.author.id]["–†–æ–ª–∏"]:
                        try:
                            await message.author.add_roles(get(iterable=message.author.guild.roles, id=role))
                        except Exception:
                            await logs(level=LEVELS[1], message=format_exc())
                    try:
                        await message.author.remove_roles(get(iterable=message.author.guild.roles,
                                                              id=1007586338238898187))
                    except Exception:
                        await logs(level=LEVELS[1], message=format_exc())
                    from db.members import members
                    members[message.author.id]["–°—Ç–∞—Ç—É—Å"] = True
                    await save(file="members", content=members)
        except Exception:
            await logs(level=LEVELS[4], message=format_exc())

    @Cog.listener()
    async def on_reaction_add(self, reaction, user):
        try:
            if str(reaction) == "üëç":
                from db.members import members
                members[user.id]["–õ–∞–π–∫–∏"] += 1
                await save(file="members", content=members)
            if str(reaction) == "üëé":
                from db.members import members
                members[user.id]["–î–∏–∑–ª–∞–π–∫–∏"] += 1
                await save(file="members", content=members)
        except Exception:
            await logs(level=LEVELS[4], message=format_exc())


def setup(bot):
    try:
        bot.add_cog(cog=Activity(bot=bot))
    except Exception:
        run(main=logs(level=LEVELS[4], message=format_exc()))
